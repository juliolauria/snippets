# Command to ignore SSL verification (MBB Jarvis Project Issue with GitLab)
git config --global http.sslVerify "false"

# GitLab
# Verify ssh key details
ssh -T git@gitlab

# A more complex way to verify the ssh key details
ssh -Tvvv git@gitlab.com

# Create an ssh keygen
ssh-keygen -t ed25519

# Get info of the generated ssh key
# Copy content and insert in GitLab / Profile / SSH
cat ~/.ssh/id_ed25519.pub

# Push local changes to server
# git push -u -f <remote_alias> <branch_name>
# E.g.: git push -u -f origin local-folder

# List files from branch
git ls-files

# Create a new branch and change to it
git checkout -b <branch_name>

# List of commands and configurations
git config --list

# Set Global username and email
git config --global user.name "juvince"
git config --global user.email "juvince@americas.corpdir.net"

# Add Safe directory
git config --global --add safe.directory 'C:/Users/UserName/project-name'

# Add remote Github/GitLab repo address
git remote add origin https://gitlab.br154.corpintra.net/producao/jarvis/otimizacao

# List of branches
git branch --list

### GitHub ###

# Create a GitHub repo
gh repo create # [<name>] [flags]

# First push
touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:alexpchin/<reponame>.git
git push -u origin master

# Remove a GitHub repo
gh repo delete # [<repository>] [flags]

# --- Blue Walnut ---

# Git compare files between two branches 
git diff branch-new branch-compare: path/to/script
# Usually branch-compare will be main
# And branch-compare will be the branch that you are working

# ex:
git diff feature/BW-655-llm-language-selector main: ecm1/scripts/main_automated.py

# ==================================================
# Remove local branches already merged to main
# ==================================================

# First, switch to the main branch
git checkout main

# Fetch the latest changes from the remote and prune
git fetch --prune

# Delete local branches that are no longer on the remote
# linux
git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -n 1 git branch -d

# ========================================================
# Update feature branch with a updated version of main
# ========================================================

git checkout your-feature-branch

git fetch origin

git merge origin/main

# ---

# Discard changes in branch before checking out
git reset --hard

git checkout -- <file_path_1.ext> <example/tools/openai.py>

# Stash - save changes temporarely
# https://www.atlassian.com/git/tutorials/saving-changes/git-stash#:~:text=The%20git%20stash%20command%20takes,for%20commit%3A%20modified%3A%20index.
git stash

# Delete a branch
git branch -d <branch-name>

# List remote branches
git branch -r # list remote branches
git branch -a # list all branches, remote and local
# To navigage: 
# Space: Next page
# Enter: Next line
# Press 'Q' on <END> to quit

# Create local branch from origin
git checkout -b local_branch_name origin/remote_branch_name

# Inserting main updates from remote to feature branch
git pull origin main

# Merge feature branch B to your current branch a
git  checkout A
git pull origin A
git merge B

# Check branches that were merged in main
git branch --merge
git branch -d <branch-name> # delete one branch
git branch -d $(git branch --merged) # automatically deletes all branches that were merged
